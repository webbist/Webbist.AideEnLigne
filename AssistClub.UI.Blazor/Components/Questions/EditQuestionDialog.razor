@using System.Security.Claims
@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject DialogService DialogService
@inject FileHttpClient FileHttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<EditForm Model="_questionModel" OnValidSubmit="UpdateQuestion">
    <DataAnnotationsValidator />
    <div class="form-group">
        <div class="mb-3">
            <label class="text-black fw-medium mb-1">@Localizer["TitleLabel"]:</label>
            <div class="form-group">
                <InputText class="form-control" @bind-Value="_questionModel.Title" placeholder="Title placeholder" MaxLength="@QuestionRequest.TitleMaxLength" />
                <ValidationMessage For="@(() => _questionModel.Title)" class="text-danger pt-1" />
            </div>
        </div>
        <div class="mb-3">
            <label class="text-black fw-medium mb-1">@Localizer["ContentLabel"]:</label>
            <div class="form-group">
                <RadzenHtmlEditor @bind-Value="_questionModel.Content" style="height: 300px;">
                    <RadzenHtmlEditorUndo />
                    <RadzenHtmlEditorRedo />
                    <RadzenHtmlEditorSeparator />
                    <RadzenHtmlEditorBold />
                    <RadzenHtmlEditorItalic />
                    <RadzenHtmlEditorUnderline />
                    <RadzenHtmlEditorStrikeThrough />
                    <RadzenHtmlEditorSeparator />
                    <RadzenHtmlEditorColor />
                    <RadzenHtmlEditorRemoveFormat />
                </RadzenHtmlEditor>
                <ValidationMessage For="@(() => _questionModel.Content)" class="text-danger pt-1" />
            </div>
        </div>
        <div class="mb-3">
            <label class="text-black fw-medium mb-1">@Localizer["VisibilityLabel"]:</label>
            <div class="form-group">
                <InputSelect class="form-control" @bind-Value="_questionModel.Visibility">
                    @foreach (var visibility in Enum.GetValues(typeof(QuestionVisibility)).Cast<QuestionVisibility>())
                    {
                        <option value="@visibility">@visibility.ToVisibilityLocalizedLabel()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _questionModel.Visibility)" class="text-danger pt-1" />
            </div>
        </div>
        <div class="mb-1">
            <label class="text-black fw-medium mb-1">
                @string.Format(Localizer["FormFileLabelWithSize"], QuestionRequest.AttachmentMaxSize / 1024 / 1024):
            </label>
            <p class="fs-13 lh-20 mb-2">@_questionModel.AttachmentName</p>
            <RadzenFileInput TValue="string"
                             @bind-Value="_fileContent"
                             @bind-FileName="_fileName"
                             Style="width: 100%"
                             MaxFileSize="QuestionRequest.AttachmentMaxSize"
                             ChooseText="@Localizer["FormFileChangeButton"]"
                             Accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
        </div>
    </div>
    <div class="mt-3 text-end">
        <button type="submit" class="btn btn-primary">@Localizer["SaveButton"]</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Close">@Localizer["CancelButton"]</button>
    </div>
</EditForm>

@code {
    [Parameter] public QuestionApiResponse Question { get; set; }
    [Parameter] public EventCallback<QuestionRequest> OnQuestionUpdated { get; set; }
    
    private QuestionRequest _questionModel = new();
    private string? _fileContent;
    private string? _fileName;
    
    protected override void OnInitialized()
    {
        _questionModel = new QuestionRequest
        {
            UserId = Question.User.Id,
            Title = Question.Title,
            Content = Question.Content,
            Visibility = Enum.Parse<QuestionVisibility>(Question.Visibility, true),
            Status = Question.Status,
            AttachmentName = Question.AttachmentName
        };
    }
    
    private async Task UpdateQuestion()
    {
        if (_fileContent != null && !string.IsNullOrEmpty(_fileName))
        {
            if (!string.IsNullOrEmpty(Question.AttachmentName))
            {
                await FileHttpClient.DeleteFileAsync(Question.AttachmentName);
            }
            
            var base64 = _fileContent.Substring(_fileContent.IndexOf(",") + 1);
            var cleanedBytes = Convert.FromBase64String(base64);
            var content = new MultipartFormDataContent
            {
                { new ByteArrayContent(cleanedBytes), "file", _fileName }
            };
            
            var response = await FileHttpClient.UploadFileAsync(content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (responseJson != null && responseJson.TryGetValue("filePath", out var filePath))
                {
                    _questionModel.AttachmentName = filePath;
                }
            }
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (userId != null) _questionModel.ModifiedBy = Guid.Parse(userId);
        
        await OnQuestionUpdated.InvokeAsync(_questionModel);
        DialogService.Close();
    }
    
    private void Close() => DialogService.Close();
}