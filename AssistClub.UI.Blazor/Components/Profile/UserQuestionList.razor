@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models

@inject QuestionHttpClient QuestionHttpClient
@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<UserQuestionListResources> UserQuestionListLocalizer
@inject IStringLocalizer<QuestionStatusResources> QuestionStatusLocalizer

@if (_questions == null)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <h4>@UserQuestionListLocalizer["TotalLabel"] (@_questions.Count())</h4>
    <RadzenDataList WrapItems="false" AllowPaging="true" Data="@_questions" TItem="QuestionApiResponse" PageSize="10"
                    PagerHorizontalAlign="HorizontalAlign.Center" ShowEmptyMessage="true" 
                    EmptyText="@UserQuestionListLocalizer["EmptyText"]">
        <Template Context="question">
            <div class="question-body">
                <h5 class="fs-6">
                    <NavLink href="@($"question/{question.Id}")">@question.Title</NavLink>
                </h5>
                <div class="d-flex flex-wrap align-items-center">
                    <span class="badge me-2 @(question.Status == QuestionStatus.Resolved.ToString()
                                                               ? "bg-success" 
                                                               : question.Status == QuestionStatus.Pending.ToString()
                                                                   ? "bg-warning"
                                                                   : "bg-primary")">
                        @QuestionStatusLocalizer[question.Status]
                    </span>
                    <span class="badge-activity mt-sm-0 mt-2 badge @(question.User.Id == UserId ? "bg-dark" : "bg-secondary")">
                        @(question.User.Id == UserId ? UserQuestionListLocalizer["CreatedByUserLabel"] : UserQuestionListLocalizer["AnsweredByUserLabel"])
                    </span>
                    <div class="question-info mb-0 mt-2 mt-lg-auto d-flex flex-wrap">
                        <span class="question-info-span">
                            <span class="info-status-span">@Localizer["VisibilityLabel"]: </span>
                            @question.Visibility
                        </span>
                        <span class="question-info-span">
                            <span class="info-status-span">@Localizer["CreatedLabel"]: </span>
                            @question.CreatedAt.GetTimeAgo()
                        </span>
                        @if (question.UpdatedAt != null)
                        {
                            <span class="question-info-span">
                                <span class="info-status-span"> @Localizer["UpdatedLabel"]: </span>
                                @question.UpdatedAt.Value.GetTimeAgo()
                            </span>
                        }
                    </div>
                </div>
            </div>
        </Template>
    </RadzenDataList>
}

@code {
    [Parameter] public Guid UserId { get; set; }
    [Parameter] public IEnumerable<QuestionApiResponse> UserQuestions { get; set; } = new List<QuestionApiResponse>();
    [Parameter] public IEnumerable<AnswerApiResponse> UserAnswers { get; set; } = new List<AnswerApiResponse>();
    
    private IEnumerable<QuestionApiResponse>? _questions;
    
    protected override Task OnInitializedAsync()
    {
        var participatedQuestions = UserAnswers
            .Select(a => a.Question)
            .DistinctBy(q => q.Id);

        _questions = UserQuestions
            .Concat(participatedQuestions)
            .DistinctBy(q => q.Id)
            .OrderByDescending(q => q.CreatedAt);
        
        return Task.CompletedTask;
    }
}