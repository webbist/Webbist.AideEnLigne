@page "/"
@page "/search/{Query?}"
@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer
@attribute [Authorize]

@inject QuestionHttpClient QuestionHttpClient
@inject IStringLocalizer<AllQuestionsResources> AllQuestionsLocalizer
@inject IStringLocalizer<QuestionStatusResources> QuestionStatusResources

<PageTitle>@AllQuestionsLocalizer["PageTitle"]</PageTitle>

<div class="d-lg-flex">
    <h2>@AllQuestionsLocalizer["PageTitle"]</h2>
    <h5 class="fw-medium ms-lg-auto my-lg-auto">@(_questions?.Count() ?? 0) @(_questions?.Count() == 1 ? AllQuestionsLocalizer["QuestionCountSingularLabel"] : AllQuestionsLocalizer["QuestionCountPluralLabel"])</h5> 
</div>

<div class="questions-list border-top">
    <RadzenDataList WrapItems="false" AllowPaging="true" Data="@_questions" TItem="QuestionApiResponse" PageSize="15" 
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" 
                    PagingSummaryFormat="@AllQuestionsLocalizer["PagingSummary"]" ShowEmptyMessage="true" EmptyText="@AllQuestionsLocalizer["EmptyText"]">
        <Template Context="question">
            <div class="question-card d-flex rounded-0 shadow-none mb-0 bg-transparent p-2">
                <div class="question-body">
                    <h5 class="mb-2 fw-medium">
                        <NavLink href="@($"question/{question.Id}")">@question.Title</NavLink>
                    </h5>
                    <p class="mb-2 truncate-text lh-20 fs-13">
                        @question.Content.GetPlainTextFromHtml()
                    </p>
                    <div class="question-footer d-flex align-items-center px-0 border-bottom-0 pb-0">
                        <div class="info-footer d-flex flex-wrap align-items-center justify-content-between">
                            <NavLink href="@($"user/{question.User.Id}")" class="d-block d-flex">
                                <img src="@(question.User.Photo ?? "default.jpeg")" alt="avatar" class="user-img rounded-circle">
                                <h5 class="mb-0 align-content-center">@(question.User.Firstname + " " + question.User.Lastname)</h5>
                            </NavLink>
                            <small class="d-block text-end">
                                <span class="text-black d-block lh-18">@QuestionStatusResources[question.Status]</span>
                                <span class="d-block lh-18 fs-12">@question.CreatedAt.GetTimeAgo()</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </Template>
    </RadzenDataList>
</div>

@code {
    [Parameter] public string? Query { get; set; }
    private IEnumerable<QuestionApiResponse>? _questions;

    protected override async Task OnInitializedAsync()
    {
        _questions = await QuestionHttpClient.GetQuestionsAsync(QuestionVisibility.Public);
        var allQuestions = await QuestionHttpClient.GetQuestionsAsync(QuestionVisibility.Public);

        if (!string.IsNullOrWhiteSpace(Query) && allQuestions != null)
        {
            _questions = allQuestions
                .Where(q => q.Title.Contains(Query, StringComparison.OrdinalIgnoreCase) || 
                            q.Content.Contains(Query, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            _questions = allQuestions;
        }
    }
}