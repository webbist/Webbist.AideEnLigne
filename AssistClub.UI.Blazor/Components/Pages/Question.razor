@page "/question/{id}"
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.Components.Answers
@using AssistClub.UI.Blazor.Components.Questions
@using AssistClub.UI.Blazor.Routing
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer
@attribute [Authorize]
@inject QuestionHttpClient QuestionHttpClient
@inject FileHttpClient FileHttpClient
@inject IStringLocalizer<QuestionResources> QuestionLocalizer
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager Nav
@inject IStringLocalizer<QuestionStatusResources> QuestionStatusLocalizer
@inject IConfiguration Configuration

@if (_question != null)
{
    <PageTitle>@_question.Title</PageTitle>
    
    <button class="btn btn-outline-primary mb-3 button-back" @onclick="GoBack">
        <i class="bi bi-arrow-left-circle me-1"></i> @Localizer["BackButton"]
    </button>
    
    <RadzenCard class="rz-mx-auto">
        <div class="question-details">
            <AuthorizeView>
                <Authorized Context="auth">
                    @{
                        var isAdmin = auth.UserIsAdmin();
                        var isAuthor = auth.UserIsAuthor(_question.User.Id);
                    }
                    @if (isAdmin || isAuthor)
                    {
                        <div class="btn-toolbar" role="toolbar">
                            <div class="btn-group ms-auto mb-1" role="group">
                                <button class="btn btn-sm btn-outline-secondary"
                                        title="@QuestionLocalizer["EditQuestionButton"]"
                                        @onclick="() => OpenEditDialog(_question)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        title="@QuestionLocalizer["DeleteQuestionButton"]"
                                        @onclick="() => ConfirmDelete(_question.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
            <h1 class="question-title">@_question.Title</h1>
            <div class="question-info">
                <span>
                    @QuestionLocalizer["AskedLabel"]:
                    <time class="info-time">@_question.CreatedAt.GetTimeAgo()</time>
                </span>
                <span>
                    @QuestionLocalizer["StatusLabel"]:
                    <span class="info-status">@QuestionStatusLocalizer[_question.Status]</span>
                </span>
            </div>
            <div class="question-categories">
                @if (_question.Categories.Any())
                {
                    foreach (var category in _question.Categories)
                    {
                        <span class="badge bg-secondary">@category</span>
                    }
                }
            </div>
            <div class="question-content">
                @((MarkupString)_question.Content)
                @if (!string.IsNullOrEmpty(_question.AttachmentName))
                {
                    var fileUrl = $"{Configuration["Api:BaseUrl"]}/{FileApiRouting.DownloadFileRoute}/{_question.AttachmentName}";

                    <div class="mt-3">
                        @if (_question.AttachmentName.EndsWith(".jpg") || _question.AttachmentName.EndsWith(".jpeg") || _question.AttachmentName.EndsWith(".png"))
                        {
                            <img src="@fileUrl" alt="@Localizer["AttachmentAltText"]" style="max-width: 100%; height: auto;" class="img-thumbnail" />
                        }
                        else
                        {
                            <a class="button-download btn btn-outline-primary" href="@fileUrl" target="_blank" download>
                                <i class="bi bi-download"></i> @Localizer["DownloadAttachmentButton"]
                            </a>
                        }
                    </div>
                }
            </div>
            <div class="question-author">
                <span class="author-span">@QuestionLocalizer["AskedByLabel"]:</span>
                <a href="user/@_question.User.Id">
                    <span class="author-image-span">
                        <img src="@(_question.User.Photo ?? "default.jpeg")" alt="avatar" class="author-img rounded-circle">
                    </span>
                    <span class="author-text-span">@_question.User.Firstname @_question.User.Lastname</span>
                </a>
            </div>
        </div>
    </RadzenCard>
    
    <AnswerList @ref="_answerList" QuestionId="@_question.Id" OfficialStatusChanged="ReloadQuestionAsync"/>
    <AnswerForm QuestionId="@_question.Id" AnswerCreated="OnAnswerCreated"/>
}
else
{
    <PageTitle>@QuestionLocalizer["NotFoundTitle"]</PageTitle>
    <h1 class="question-title">@QuestionLocalizer["NotFoundTitle"]</h1>
}


@code {
    [Parameter] public string Id { get; set; }
    private QuestionApiResponse? _question;
    private AnswerList? _answerList;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _question = await QuestionHttpClient.GetQuestionAsync(Guid.Parse(Id));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    
    private async Task RefreshAnswers()
    {
        if (_answerList != null)
        {
            await _answerList.RefreshAsync();
        }
    }
    
    private async Task ReloadQuestionAsync()
    {
        _question = await QuestionHttpClient.GetQuestionAsync(Guid.Parse(Id));
        StateHasChanged();
    }
    
    private async Task OnAnswerCreated()
    {
        await RefreshAnswers();
        await ReloadQuestionAsync();
    }
    
    private async Task OpenEditDialog(QuestionApiResponse question)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Question", question },
            { "OnQuestionUpdated", EventCallback.Factory.Create<QuestionRequest>(this, async (updatedQuestion) =>
                {
                    var success = await QuestionHttpClient.UpdateQuestionAsync(question.Id, updatedQuestion);
                    if (success)
                    {
                        await ReloadQuestionAsync();
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = Localizer["Success"],
                            Detail = QuestionLocalizer["UpdateQuestionSuccessMessage"],
                            Duration = 4000
                        });
                    }
                    else
                    {
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = Localizer["Error"],
                            Detail = QuestionLocalizer["UpdateQuestionErrorMessage"],
                            Duration = 4000
                        });
                    }
                })
            }
        };
        
        await DialogService.OpenAsync<EditQuestionDialog>(@QuestionLocalizer["EditQuestionDialogTitle"], parameters);
    }
    
    private void GoBack()
    {
        Nav.NavigateTo("/");
    }

    private async Task ConfirmDelete(Guid questionId)
    {
        var confirmed = await DialogService.Confirm(
            QuestionLocalizer["DeleteQuestionConfirmMessage"],
            QuestionLocalizer["DeleteQuestionConfirmTitle"],
            new ConfirmOptions
            {
                OkButtonText = Localizer["ConfirmButton"],
                CancelButtonText = Localizer["CancelButton"]
            });
        
        if (confirmed == true)
        {
            await DeleteQuestion(questionId);
        }
    }
    
    private async Task DeleteQuestion(Guid questionId)
    {
        var success = await QuestionHttpClient.DeleteQuestionAsync(questionId);
        if (success)
        {
            if (_question != null && !string.IsNullOrEmpty(_question.AttachmentName))
            {
                var deleteSuccess= await FileHttpClient.DeleteFileAsync(_question.AttachmentName);
                if (!deleteSuccess) Console.WriteLine("File not found or could not be deleted.");
            }
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = Localizer["Success"],
                Detail = QuestionLocalizer["DeleteQuestionSuccessMessage"],
                Duration = 4000
            });
            Nav.NavigateTo("/");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = QuestionLocalizer["DeleteQuestionErrorMessage"],
                Duration = 4000
            });
        }
    }
}