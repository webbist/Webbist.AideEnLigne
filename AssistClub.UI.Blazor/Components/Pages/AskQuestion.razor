@page "/AskQuestion"
@using System.Security.Claims
@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer
@attribute [Authorize]

@inject QuestionHttpClient QuestionHttpClient
@inject FileHttpClient FileHttpClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IStringLocalizer<AskQuestionResources> AskQuestionLocalizer
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>@AskQuestionLocalizer["PageTitle"]</h2>

<section class="question-area pt-2 pb-2">
    <div class="container">
        <div class="row">
            <div class="card card-item">
                <EditForm Model="_questionModel" OnValidSubmit="PublishQuestion">
                    <DataAnnotationsValidator />
                    <div class="card-body">
                        <div class="input-box">
                            <label class="text-black fw-medium mb-0">
                                @AskQuestionLocalizer["FormTitleLabel"]
                                <span class="text-danger">*</span>
                            </label>
                            <p class="fs-13 lh-20">@AskQuestionLocalizer["TitleHint"]</p>
                            <div class="form-group">
                                <RadzenTextBox @bind-Value="_questionModel.Title" class="form-control form--control" Placeholder=@AskQuestionLocalizer["FormTitlePlaceholder"] Style="position: relative;" MaxLength="@QuestionRequest.TitleMaxLength"
                                               @oninput=@(args => OnTextChanged(args.Value.ToString())) @onfocusout="CloseSuggestions"/>
                                <ValidationMessage For="@(() => _questionModel.Title)" class="text-danger pt-1" />
                                @if (_suggestedQuestions?.Any() == true)
                                {
                                    <div class="search-suggestions border rounded shadow bg-white position-absolute" style="width: auto;">
                                        <ul class="list-group list-group-flush">
                                            <p class="suggestion-text">@AskQuestionLocalizer["SuggestedQuestionsTitle"]:</p>
                                            @foreach (var question in _suggestedQuestions.Take(5))
                                            {
                                                <NavLink href="@($"question/{question.Id}")">
                                                    <li class="list-group-item list-group-item-action">
                                                        <span class="fw-bold truncate-text">@question.Title</span>
                                                        <small class="text-muted truncate-text">@question.Content.GetPlainTextFromHtml()</small>
                                                    </li>
                                                </NavLink>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="input-box">
                            <label class="text-black fw-medium mb-0">
                                @AskQuestionLocalizer["FormContentLabel"]
                                <span class="text-danger">*</span>
                            </label>
                            <p class="fs-13 lh-20">@AskQuestionLocalizer["FormContentHint"]</p>
                            <div class="form-group">
                                <RadzenHtmlEditor @bind-Value="_questionModel.Content" style="height: 200px;" UploadUrl="upload/image">
                                    <RadzenHtmlEditorUndo />
                                    <RadzenHtmlEditorRedo />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorBold />
                                    <RadzenHtmlEditorItalic />
                                    <RadzenHtmlEditorUnderline />
                                    <RadzenHtmlEditorStrikeThrough />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor />
                                    <RadzenHtmlEditorRemoveFormat />
                                </RadzenHtmlEditor>
                                <ValidationMessage For="@(() => _questionModel.Content)" class="text-danger pt-1" />
                            </div>
                        </div>
                        <div class="input-box">
                            <label class="text-black fw-medium mb-0">
                                @string.Format(Localizer["FormFileLabelWithSize"], QuestionRequest.AttachmentMaxSize / 1024 / 1024)
                            </label>
                            <RadzenFileInput TValue="string"
                                             @bind-Value="_fileContent"
                                             @bind-FileName="_fileName"
                                             Style="width: 100%"
                                             MaxFileSize="QuestionRequest.AttachmentMaxSize"
                                             ChooseText="@Localizer["FormFileInputLabel"]"
                                             Accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
                        </div>
                        <div class="input-box">
                            <div class="btn-box">
                                <button type="submit" class="btn btn-primary">@AskQuestionLocalizer["FormSubmitButton"]</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private QuestionRequest _questionModel = new();
    private string? _fileContent;
    private string? _fileName;
    private string _searchTerm = string.Empty;
    private List<QuestionApiResponse> _suggestedQuestions = new();
    private System.Timers.Timer? _debounceTimer;
    
    private async void CloseSuggestions()
    {
        try
        {
            await Task.Delay(100);
            _suggestedQuestions.Clear();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error closing suggestions: {e.Message}");
        }
    }
    
    private async Task OnTextChanged(string value)
    {
        _searchTerm = value;
        _debounceTimer?.Stop();
        _debounceTimer?.Dispose();
        
        if (!string.IsNullOrWhiteSpace(_searchTerm) && _searchTerm.Length > 3)
        {
            _debounceTimer = new System.Timers.Timer(500);
            _debounceTimer.Elapsed += async (_, _) =>
            {
                _debounceTimer?.Stop();
                _debounceTimer?.Dispose();
                await InvokeAsync(async () =>
                {
                    var results = await QuestionHttpClient.SearchQuestionsAsync(_searchTerm, QuestionVisibility.Public);
                    _suggestedQuestions = results?.ToList() ?? new();
                    StateHasChanged();
                });
            };
            _debounceTimer.AutoReset = false;
            _debounceTimer.Start();
        }
        else
        {
            _suggestedQuestions.Clear();
        }
        await Task.CompletedTask;
    }

    private async Task PublishQuestion()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!Guid.TryParse(userIdClaim, out var userId))
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AskQuestionLocalizer["FormUserErrorMessage"],
                Duration = 4000
            });
            return;
        }
        _questionModel.UserId = userId;
        
        if (_fileContent != null && !string.IsNullOrEmpty(_fileName))
        {
            var base64 = _fileContent.Substring(_fileContent.IndexOf(",") + 1);
            var cleanedBytes = Convert.FromBase64String(base64);
            
            var content = new MultipartFormDataContent
            {
                { new ByteArrayContent(cleanedBytes), "file", _fileName }
            };
            
            var response = await FileHttpClient.UploadFileAsync(content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (responseJson != null && responseJson.TryGetValue("filePath", out var filePath))
                {
                    _questionModel.AttachmentName = filePath;
                }
            }
            else
            {
                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["Error"],
                    Detail = Localizer["FileUploadErrorMessage"],
                    Duration = 4000
                });
                return;
            }
        }
        
        var result = await QuestionHttpClient.CreateQuestionAsync(_questionModel);

        if (result == null)
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AskQuestionLocalizer["FormErrorMessage"],
                Duration = 4000
            });
        }
        else
        {
            _questionModel = new QuestionRequest();
        
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = AskQuestionLocalizer["SuccessTitle"],
                Detail = AskQuestionLocalizer["SuccessMessage"],
                Duration = 4000
            });
            NavigationManager.NavigateTo("/");
        }
    }
    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}