@page "/AskQuestion"
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@rendermode InteractiveServer

@inject QuestionHttpClient QuestionHttpClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<h2>Ask a question</h2>

<section class="question-area pt-5 pb-4">
    <div class="container">
        <div class="row">
            <div class="card card-item">
                <EditForm Model="_questionModel" OnValidSubmit="PublishQuestion">
                    <DataAnnotationsValidator />
                    <div class="card-body">
                        <div class="input-box">
                            <label class="text-black fw-medium mb-0">Question Title</label>
                            <p class="fs-13 lh-20">Be specific and imagine youâ€™re asking a question to another person</p>
                            <div class="form-group">
                                <InputText class="form-control form--control" @bind-Value="_questionModel.Title" placeholder="Enter your question title" MaxLength="@QuestionRequest.TitleMaxLength"/>
                                <ValidationMessage For="@(() => _questionModel.Title)" class="text-danger pt-1" />
                            </div>
                        </div>
                        <div class="input-box">
                            <label class="text-black fw-medium mb-0">Content</label>
                            <p class="fs-13 lh-20">Include all the information someone would need to answer your question</p>
                            <div class="form-group">
                                <RadzenHtmlEditor @bind-Value="_questionModel.Content" style="height: 200px;" UploadUrl="upload/image">
                                    <RadzenHtmlEditorUndo />
                                    <RadzenHtmlEditorRedo />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorBold />
                                    <RadzenHtmlEditorItalic />
                                    <RadzenHtmlEditorUnderline />
                                    <RadzenHtmlEditorStrikeThrough />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor />
                                    <RadzenHtmlEditorRemoveFormat />
                                </RadzenHtmlEditor>
                                <ValidationMessage For="@(() => _questionModel.Content)" class="text-danger pt-1" />
                            </div>
                        </div>
                        <div class="input-box">
                            <div class="btn-box">
                                <button type="submit" class="btn btn-primary">Publish your question</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private QuestionRequest _questionModel = new();

    private async Task PublishQuestion()
    {
        var result = await QuestionHttpClient.CreateQuestionAsync(_questionModel);

        if (result == null)
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "An error occurred while creating the question.",
                Duration = 4000
            });
        }
        else
        {
            _questionModel = new QuestionRequest();
        
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Question published",
                Detail = "Your question has been published successfully.",
                Duration = 4000
            });
            NavigationManager.NavigateTo("/");
        }
    }
    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}