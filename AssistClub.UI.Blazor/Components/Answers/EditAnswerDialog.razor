@using AssistClub.UI.Blazor.Models
@inject DialogService DialogService
@rendermode InteractiveServer

<EditForm Model="_answerModel" OnValidSubmit="UpdateAnswer">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label class="mb-1">@Localizer["ContentLabel"]:</label>
        <RadzenHtmlEditor @bind-Value="_answerModel.Content" Style="height: 300px;">
            <RadzenHtmlEditorUndo/>
            <RadzenHtmlEditorRedo/>
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorBold/>
            <RadzenHtmlEditorItalic/>
            <RadzenHtmlEditorUnderline/>
            <RadzenHtmlEditorStrikeThrough/>
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorColor/>
            <RadzenHtmlEditorRemoveFormat/>
        </RadzenHtmlEditor>
        <ValidationMessage For="@(() => _answerModel.Content)" />
    </div>
    <div class="mt-3 text-end">
        <button class="btn btn-primary" type="submit">@Localizer["SaveButton"]</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Close">@Localizer["CancelButton"]</button>
    </div>
</EditForm>

@code {
    [Parameter] public AnswerApiResponse Answer { get; set; }
    [Parameter] public EventCallback<AnswerRequest> OnAnswerUpdated { get; set; }
    
    private AnswerRequest _answerModel = new();

    protected override void OnInitialized()
    {
        _answerModel = new AnswerRequest
        {
            QuestionId = Answer.QuestionId,
            UserId = Answer.User.Id,
            Content = Answer.Content
        };
    }

    private async Task UpdateAnswer()
    {
        await OnAnswerUpdated.InvokeAsync(_answerModel);
        DialogService.Close();
    }
    
    private void Close() => DialogService.Close();
}