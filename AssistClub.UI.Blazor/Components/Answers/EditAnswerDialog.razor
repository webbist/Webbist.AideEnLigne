@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models

@inject DialogService DialogService
@inject FileHttpClient FileHttpClient
@rendermode InteractiveServer

<EditForm Model="_answerModel" OnValidSubmit="UpdateAnswer">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label class="text-black fw-medium mb-1">@Localizer["ContentLabel"]:</label>
        <RadzenHtmlEditor @bind-Value="_answerModel.Content" Style="height: 300px;">
            <RadzenHtmlEditorUndo/>
            <RadzenHtmlEditorRedo/>
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorBold/>
            <RadzenHtmlEditorItalic/>
            <RadzenHtmlEditorUnderline/>
            <RadzenHtmlEditorStrikeThrough/>
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorColor/>
            <RadzenHtmlEditorRemoveFormat/>
        </RadzenHtmlEditor>
        <ValidationMessage For="@(() => _answerModel.Content)" />
    </div>
    <div class="mt-3">
        <label class="text-black fw-medium mb-1">
            @string.Format(Localizer["FormFileLabelWithSize"], AnswerRequest.AttachmentMaxSize / 1024 / 1024):
        </label>
        <p class="fs-13 lh-20 mb-2">@_answerModel.AttachmentName</p>
        <RadzenFileInput TValue="string"
                         @bind-Value="_fileContent"
                         @bind-FileName="_fileName"
                         Style="width: 100%"
                         MaxFileSize="AnswerRequest.AttachmentMaxSize"
                         ChooseText="@Localizer["FormFileChangeButton"]"
                         Accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
    </div>
    <div class="mt-3 text-end">
        <button class="btn btn-primary" type="submit" disabled="@_isSubmitting">@Localizer["SaveButton"]</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Close">@Localizer["CancelButton"]</button>
    </div>
</EditForm>

@code {
    [Parameter] public AnswerApiResponse Answer { get; set; }
    [Parameter] public EventCallback<AnswerRequest> OnAnswerUpdated { get; set; }
    
    private AnswerRequest _answerModel = new();
    private string? _fileContent;
    private string? _fileName;
    private bool _isSubmitting;

    protected override void OnInitialized()
    {
        _answerModel = new AnswerRequest
        {
            QuestionId = Answer.Question.Id,
            UserId = Answer.User.Id,
            Content = Answer.Content,
            AttachmentName = Answer.AttachmentName
        };
    }

    private async Task UpdateAnswer()
    {
        if (_isSubmitting) return;
        _isSubmitting = true;
        try
        {
            if (_fileContent != null && !string.IsNullOrEmpty(_fileName))
            {
                if (!string.IsNullOrEmpty(Answer.AttachmentName))
                {
                    await FileHttpClient.DeleteFileAsync(Answer.AttachmentName);
                }

                var base64 = _fileContent.Substring(_fileContent.IndexOf(",") + 1);
                var cleanedBytes = Convert.FromBase64String(base64);
                var content = new MultipartFormDataContent
                {
                    { new ByteArrayContent(cleanedBytes), "file", _fileName }
                };

                var response = await FileHttpClient.UploadFileAsync(content);
                if (response.IsSuccessStatusCode)
                {
                    var responseJson = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (responseJson != null && responseJson.TryGetValue("filePath", out var filePath))
                    {
                        _answerModel.AttachmentName = filePath;
                    }
                }
            }

            await OnAnswerUpdated.InvokeAsync(_answerModel);
            DialogService.Close();
        }
        finally
        {
            _isSubmitting = false;
        }
    }
    
    private void Close() => DialogService.Close();
}