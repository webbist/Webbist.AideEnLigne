@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using AssistClub.UI.Blazor.Extensions
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<AnswerListResources> AnswerListLocalizer

<div class="total-answers">
    <h5>@(_answers?.Count() ?? 0) @(_answers?.Count() == 1 ? AnswerListLocalizer["AnswerCountSingularLabel"] : AnswerListLocalizer["AnswerCountPluralLabel"])</h5>
</div>

<RadzenDataList WrapItems="false" AllowPaging="true" Data="@_answers" TItem="AnswerApiResponse" PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                PagingSummaryFormat="@AnswerListLocalizer["PagingSummary"]" ShowEmptyMessage="true" 
                EmptyText="@AnswerListLocalizer["EmptyText"]">
    <Template Context="answer">
        <div class="d-flex">
            <div class="answer-body">
                @((MarkupString)answer.Content)
            </div>
            <AuthorizeView Roles="Admin">
                <div class="dropdown ms-auto">
                    <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <ul class="dropdown-menu">
                        @if (!HasOfficialAnswer || answer.Status == AnswerStatus.Official.ToString())
                        {
                            <li>
                                <button class="dropdown-item" @onclick="@(() => ToggleOfficialStatus(answer.Id, Enum.Parse<AnswerStatus>(answer.Status)))">
                                    @(answer.Status == AnswerStatus.Official.ToString()
                                        ? AnswerListLocalizer["UnmarkOfficialButton"]
                                        : AnswerListLocalizer["MarkOfficialButton"])
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </AuthorizeView>
        </div>
        <div class="answer-info text-end">
            <div class="answer-date d-flex">
                @if (answer.Status == AnswerStatus.Official.ToString())
                {
                    <span class="badge-official badge bg-success me-2">@AnswerListLocalizer["OfficialAnswerBadgeLabel"]</span>
                }
                @AnswerListLocalizer["AnsweredLabel"]:&nbsp;
                <span>@answer.CreatedAt?.GetTimeAgo()</span>
            </div>
            <div>
                <span class="author-span">@AnswerListLocalizer["ByLabel"]:</span>
                <a href="user/@answer.User.Id">
                    <span class="author-image-span">
                        <img src="@(answer.User.Photo ?? "images/default.jpeg")" alt="avatar" class="author-img rounded-circle">
                    </span>
                    <span class="author-text-span">@answer.User.Firstname @answer.User.Lastname</span>
                </a>
            </div>
        </div>
    </Template>
</RadzenDataList>

@code {
    [Parameter] public Guid QuestionId { get; set; }
    [Parameter] public EventCallback OfficialStatusChanged { get; set; }
    private IEnumerable<AnswerApiResponse>? _answers;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAnswersAsync();
    }
    
    public async Task RefreshAsync()
    {
        await LoadAnswersAsync();
        StateHasChanged();
    }

    private async Task LoadAnswersAsync()
    {
        _answers = await AnswerHttpClient.GetAnswersAsync(QuestionId);
    }
    
    private async Task ToggleOfficialStatus(Guid answerId, AnswerStatus currentStatus)
    {
        var newStatus = currentStatus == AnswerStatus.Official
            ? AnswerStatus.Pending
            : AnswerStatus.Official;

        var success = await AnswerHttpClient.UpdateAnswerStatusAsync(answerId, newStatus);
    
        if (success)
        {
            await RefreshAsync();
            await OfficialStatusChanged.InvokeAsync();
        }
    }
    
    private bool HasOfficialAnswer => _answers?.Any(a => a.Status == AnswerStatus.Official.ToString()) ?? false;
}