@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using AssistClub.UI.Blazor.Extensions
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<AnswerListResources> AnswerListLocalizer
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService

<div class="total-answers">
    <h5>@(_answers?.Count() ?? 0) @(_answers?.Count() == 1 ? AnswerListLocalizer["AnswerCountSingularLabel"] : AnswerListLocalizer["AnswerCountPluralLabel"])</h5>
</div>

<RadzenDataList WrapItems="false" AllowPaging="true" Data="@_answers" TItem="AnswerApiResponse" PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                PagingSummaryFormat="@AnswerListLocalizer["PagingSummary"]" ShowEmptyMessage="true" 
                EmptyText="@AnswerListLocalizer["EmptyText"]">
    <Template Context="answer">
        <div class="d-flex">
            <div class="answer-body">
                @((MarkupString)answer.Content)
            </div>
            <AuthorizeView>
                <Authorized Context="auth">
                    @{
                        var isAdmin = auth.UserIsAdmin();
                        var isAuthor = auth.UserIsAuthor(answer.User.Id);
                    }
                    @if (isAdmin || isAuthor)
                    {
                        <div class="btn-toolbar ms-auto" role="toolbar">
                            <div class="btn-group my-auto" role="group">
                                @if (isAdmin && (!HasOfficialAnswer || answer.Status == AnswerStatus.Official.ToString()))
                                {
                                    <button @ref="@_buttonRefMap[answer.Id]" @onmouseenter="@(() => ShowTooltip(_buttonRefMap[answer.Id], answer.Status))" 
                                            class="btn btn-sm @(answer.Status == AnswerStatus.Official.ToString() 
                                                                  ? "btn-outline-danger" 
                                                                  : "btn-outline-success")"
                                            @onclick="@(() => ToggleOfficialStatus(answer.Id, Enum.Parse<AnswerStatus>(answer.Status)))">
                                        <i class="bi @(answer.Status == AnswerStatus.Official.ToString()
                                                         ? "bi-x-circle"
                                                         : "bi-check-circle")"></i>
                                    </button>
                                }

                                <button class="btn btn-outline-secondary btn-sm"
                                        title="@AnswerListLocalizer["EditAnswerButton"]"
                                        @onclick="@(() => OpenEditDialog(answer))">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            </div>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="answer-info text-end">
            <div class="answer-date d-flex">
                @if (answer.Status == AnswerStatus.Official.ToString())
                {
                    <span class="badge-official badge bg-success me-2">@AnswerListLocalizer["OfficialAnswerBadgeLabel"]</span>
                }
                @AnswerListLocalizer["AnsweredLabel"]:&nbsp;
                <span>@answer.CreatedAt?.GetTimeAgo()</span>
            </div>
            <div>
                <span class="author-span">@AnswerListLocalizer["ByLabel"]:</span>
                <a href="user/@answer.User.Id">
                    <span class="author-image-span">
                        <img src="@(answer.User.Photo ?? "images/default.jpeg")" alt="avatar" class="author-img rounded-circle">
                    </span>
                    <span class="author-text-span">@answer.User.Firstname @answer.User.Lastname</span>
                </a>
            </div>
        </div>
    </Template>
</RadzenDataList>

@code {
    [Parameter] public Guid QuestionId { get; set; }
    [Parameter] public EventCallback OfficialStatusChanged { get; set; }
    private IEnumerable<AnswerApiResponse>? _answers;
    private Dictionary<Guid, ElementReference> _buttonRefMap = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAnswersAsync();
    }
    
    public async Task RefreshAsync()
    {
        await LoadAnswersAsync();
        StateHasChanged();
    }

    private async Task LoadAnswersAsync()
    {
        _answers = await AnswerHttpClient.GetAnswersAsync(QuestionId);
    }
    
    private async Task ToggleOfficialStatus(Guid answerId, AnswerStatus currentStatus)
    {
        var newStatus = currentStatus == AnswerStatus.Official
            ? AnswerStatus.Pending
            : AnswerStatus.Official;

        var success = await AnswerHttpClient.UpdateAnswerStatusAsync(answerId, newStatus);
    
        if (success)
        {
            await RefreshAsync();
            await OfficialStatusChanged.InvokeAsync();
        }
    }
    
    private bool HasOfficialAnswer => _answers?.Any(a => a.Status == AnswerStatus.Official.ToString()) ?? false;
    
    private async Task OpenEditDialog(AnswerApiResponse answer)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Answer", answer },
            { "OnAnswerUpdated", EventCallback.Factory.Create<AnswerRequest>(this, async (updatedAnswer) =>
                {
                    var success = await AnswerHttpClient.UpdateAnswerAsync(answer.Id, updatedAnswer);
                    if (success)
                    {
                        await RefreshAsync();
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = Localizer["Success"],
                            Detail = AnswerListLocalizer["UpdateAnswerSuccessMessage"],
                            Duration = 4000
                        });
                    }
                    else
                    {
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = Localizer["Error"],
                            Detail = AnswerListLocalizer["UpdateAnswerErrorMessage"],
                            Duration = 4000
                        });
                    }
                })
            }
        };

        await DialogService.OpenAsync<EditAnswerDialog>(AnswerListLocalizer["EditAnswerDialogTitle"], parameters);
    }

    void ShowTooltip(ElementReference elementReference, string status)
    {
        TooltipService.Open(
            elementReference, 
            status == AnswerStatus.Official.ToString() 
                ? AnswerListLocalizer["UnmarkOfficialButton"] 
                : AnswerListLocalizer["MarkOfficialButton"],
            new TooltipOptions
            {
                Duration = null,
                Style = status == AnswerStatus.Official.ToString() 
                    ? "background: var(--bs-danger);"
                    : "background: var(--bs-success);"
            });
    }
}