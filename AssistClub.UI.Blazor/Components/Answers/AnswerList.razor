@using System.Security.Claims
@using AssistClub.UI.Blazor.Components.Enums
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using AssistClub.UI.Blazor.Extensions
@using AssistClub.UI.Blazor.Routing
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<AnswerListResources> AnswerListLocalizer
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject IConfiguration Configuration
@inject FileHttpClient FileHttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AnswerVoteHttpClient AnswerVoteHttpClient

<div class="total-answers">
    <h5>@(_answers?.Count() ?? 0) @(_answers?.Count() == 1 ? AnswerListLocalizer["AnswerCountSingularLabel"] : AnswerListLocalizer["AnswerCountPluralLabel"])</h5>
</div>

<RadzenDataList WrapItems="false" AllowPaging="true" Data="@_answers" TItem="AnswerApiResponse" PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                PagingSummaryFormat="@AnswerListLocalizer["PagingSummary"]" ShowEmptyMessage="true" 
                EmptyText="@AnswerListLocalizer["EmptyText"]">
    <Template Context="answer">
        <div class="d-flex">
            <div class="toggle-vote">
                <span class="vote-count">@answer.VoteCount</span>
                <button class="btn-vote btn btn-sm mt-2"
                        title="@AnswerListLocalizer["VoteButtonLabel"]"
                        @onclick="@(() => ToggleVote(answer))">
                    <i class="bi @(answer.HasVoted ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                </button>
            </div>
            <div class="answer w-100">
                <AuthorizeView>
                    <Authorized Context="auth">
                        @{
                            var isAdmin = auth.UserIsAdmin();
                            var isAuthor = auth.UserIsAuthor(answer.User.Id);
                        }
                        @if (isAdmin || isAuthor)
                        {
                            <div class="btn-toolbar" role="toolbar">
                                <div class="btn-group ms-auto mb-1" role="group">
                                    @if (isAdmin && (!HasOfficialAnswer || answer.Status == AnswerStatus.Official.ToString()))
                                    {
                                        <button @ref="@_buttonRefMap[answer.Id]" disabled="@_isProcessingOfficialToggle"
                                                @onmouseenter="@(() => ShowTooltip(_buttonRefMap[answer.Id], answer.Status))"
                                                @onmouseleave="HideTooltip"
                                                class="btn btn-sm @(answer.Status == AnswerStatus.Official.ToString()
                                                                      ? "btn-outline-danger"
                                                                      : "btn-outline-success")"
                                                @onclick="@(() => ToggleOfficialStatus(answer.Id, Enum.Parse<AnswerStatus>(answer.Status)))">
                                            <i class="bi @(answer.Status == AnswerStatus.Official.ToString()
                                                             ? "bi-x-circle"
                                                             : "bi-check-circle")"></i>
                                        </button>
                                    }

                                    <button class="btn btn-outline-secondary btn-sm"
                                            title="@AnswerListLocalizer["EditAnswerButton"]"
                                            @onclick="@(() => OpenEditDialog(answer))">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>

                                    <button class="btn btn-outline-danger btn-sm"
                                            title="@AnswerListLocalizer["DeleteAnswerButton"]"
                                            @onclick="@(() => ConfirmDelete(answer.Id, answer.AttachmentName))">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
                <div class="answer-body">
                    @((MarkupString)answer.Content)
                    @if (!string.IsNullOrEmpty(answer.AttachmentName))
                    {
                        var fileUrl = $"{Configuration["Api:BaseUrl"]}/{FileApiRouting.DownloadFileRoute}/{answer.AttachmentName}";

                        <div class="mt-3">
                            @if (answer.AttachmentName.EndsWith(".jpg") || answer.AttachmentName.EndsWith(".jpeg") || answer.AttachmentName.EndsWith(".png"))
                            {
                                <img src="@fileUrl" alt="@Localizer["AttachmentAltText"]" style="max-width: 100%; height: auto;" class="img-thumbnail"/>
                            }
                            else
                            {
                                <a class="button-download btn btn-outline-primary" href="@fileUrl" target="_blank" download>
                                    <i class="bi bi-download"></i> @Localizer["DownloadAttachmentButton"]
                                </a>
                            }
                        </div>
                    }
                </div>
                <div class="answer-info text-end">
                    <div class="answer-date d-flex">
                        @if (answer.Status == AnswerStatus.Official.ToString())
                        {
                            <span class="badge-official badge bg-success me-2">@AnswerListLocalizer["OfficialAnswerBadgeLabel"]</span>
                        }
                        @AnswerListLocalizer["AnsweredLabel"]:&nbsp;
                        <span>@answer.CreatedAt.GetTimeAgo()</span>
                    </div>
                    <div>
                        <span class="author-span">@AnswerListLocalizer["ByLabel"]:</span>
                        <a href="user/@answer.User.Id">
                            <span class="author-image-span">
                                <img src="@(answer.User.Photo ?? "images/default.jpeg")" alt="avatar" class="author-img rounded-circle">
                            </span>
                            <span class="author-text-span">@answer.User.Firstname @answer.User.Lastname</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </Template>
</RadzenDataList>

@code {
    [Parameter] public Guid QuestionId { get; set; }
    [Parameter] public EventCallback OfficialStatusChanged { get; set; }
    private IEnumerable<AnswerApiResponse>? _answers;
    private Dictionary<Guid, ElementReference> _buttonRefMap = new();
    private ElementReference? _currentTooltipRef;
    private bool _isProcessingOfficialToggle;
    private Guid _userId;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        _userId = Guid.TryParse(userIdClaim, out var id) ? id : Guid.Empty;
        await LoadAnswersAsync();
    }
    
    public async Task RefreshAsync()
    {
        await LoadAnswersAsync();
        StateHasChanged();
    }

    private async Task LoadAnswersAsync()
    {
        _answers = await AnswerHttpClient.GetAnswersAsync(QuestionId, _userId);
    }
    
    private async Task ToggleOfficialStatus(Guid answerId, AnswerStatus currentStatus)
    {
        if (_isProcessingOfficialToggle) return;
        _isProcessingOfficialToggle = true;
        try
        {
            var newStatus = currentStatus == AnswerStatus.Official
                ? AnswerStatus.Pending
                : AnswerStatus.Official;

            var success = await AnswerHttpClient.UpdateAnswerStatusAsync(answerId, newStatus);

            if (success)
            {
                await RefreshAsync();
                await OfficialStatusChanged.InvokeAsync();
            }
        }
        finally
        {
            _isProcessingOfficialToggle = false;
        }
    }
    
    private bool HasOfficialAnswer => _answers?.Any(a => a.Status == AnswerStatus.Official.ToString()) ?? false;
    
    private async Task OpenEditDialog(AnswerApiResponse answer)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Answer", answer },
            { "OnAnswerUpdated", EventCallback.Factory.Create<AnswerRequest>(this, async (updatedAnswer) =>
                {
                    var success = await AnswerHttpClient.UpdateAnswerAsync(answer.Id, updatedAnswer);
                    if (success)
                    {
                        await RefreshAsync();
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = Localizer["Success"],
                            Detail = AnswerListLocalizer["UpdateAnswerSuccessMessage"],
                            Duration = 4000
                        });
                    }
                    else
                    {
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = Localizer["Error"],
                            Detail = AnswerListLocalizer["UpdateAnswerErrorMessage"],
                            Duration = 4000
                        });
                    }
                })
            }
        };

        await DialogService.OpenAsync<EditAnswerDialog>(AnswerListLocalizer["EditAnswerDialogTitle"], parameters);
    }

    void ShowTooltip(ElementReference elementReference, string status)
    {
        _currentTooltipRef = elementReference;
        TooltipService.Open(
            elementReference, 
            status == AnswerStatus.Official.ToString() 
                ? AnswerListLocalizer["UnmarkOfficialButton"] 
                : AnswerListLocalizer["MarkOfficialButton"],
            new TooltipOptions
            {
                Duration = null,
                Style = status == AnswerStatus.Official.ToString() 
                    ? "background: var(--bs-danger);"
                    : "background: var(--bs-success);"
            });
    }
    
    void HideTooltip()
    {
        if (!_currentTooltipRef.HasValue) return;
        TooltipService.Close();
    }
    
    private async Task ConfirmDelete(Guid answerId, string attachmentName)
    {
        var confirmed = await DialogService.Confirm(
            AnswerListLocalizer["DeleteAnswerConfirmMessage"],
            AnswerListLocalizer["DeleteAnswerConfirmTitle"],
            new ConfirmOptions { OkButtonText = Localizer["ConfirmButton"], CancelButtonText = Localizer["CancelButton"] });

        if (confirmed == true)
        {
            await DeleteAnswer(answerId, attachmentName);
        }
    }
    
    private async Task DeleteAnswer(Guid answerId, string attachmentName)
    {
        var success = await AnswerHttpClient.DeleteAnswerAsync(answerId);

        if (success)
        {
            if (!string.IsNullOrEmpty(attachmentName))
            {
                var deleteSuccess= await FileHttpClient.DeleteFileAsync(attachmentName);
                if (!deleteSuccess) Console.WriteLine("File not found or could not be deleted.");
            }
            await RefreshAsync();
            await OfficialStatusChanged.InvokeAsync();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = Localizer["Success"],
                Detail = AnswerListLocalizer["DeleteAnswerSuccessMessage"],
                Duration = 4000
            });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AnswerListLocalizer["DeleteAnswerErrorMessage"],
                Duration = 4000
            });
        }
    }

    private async Task ToggleVote(AnswerApiResponse answer)
    {
        try
        {
            var success = await AnswerVoteHttpClient.ToggleVoteAsync(
                new AnswerVoteRequest
                {
                    AnswerId = answer.Id,
                    UserId = _userId
                });
            if (success)
            {
                if (answer.HasVoted)
                {
                    answer.HasVoted = false;
                    answer.VoteCount--;
                } else 
                {
                    answer.HasVoted = true;
                    answer.VoteCount++;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error toggling vote: {e.Message}");
        }
    }
}