@using System.Security.Claims
@using System.Text.RegularExpressions
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<AnswerFormResources> AnswerFormLocalizer

<EditForm Model="_answerModel" OnValidSubmit="PublishAnswer">
    <DataAnnotationsValidator />
    <div class="pt-4">
        <label class="text-black fw-medium pb-2">@AnswerFormLocalizer["ComponentTitle"]</label>
        <div class="pb-3">
            <RadzenHtmlEditor @bind-Value="_answerModel.Content" style="height: 200px;" UploadUrl="upload/image">
                <RadzenHtmlEditorUndo/>
                <RadzenHtmlEditorRedo/>
                <RadzenHtmlEditorSeparator/>
                <RadzenHtmlEditorBold/>
                <RadzenHtmlEditorItalic/>
                <RadzenHtmlEditorUnderline/>
                <RadzenHtmlEditorStrikeThrough/>
                <RadzenHtmlEditorSeparator/>
                <RadzenHtmlEditorColor/>
                <RadzenHtmlEditorRemoveFormat/>
            </RadzenHtmlEditor>
            <ValidationMessage For="@(() => _answerModel.Content)" class="text-danger pt-1"/>
        </div>
        <div class="pb-2">
            <button type="submit" class="btn btn-primary" disabled="@IsSubmitDisabled">
                @AnswerFormLocalizer["FormSubmitButton"]
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public Guid QuestionId { get; set; }
    private AnswerRequest _answerModel = new();
    private bool IsSubmitDisabled => IsContentEmpty(_answerModel.Content);

    private async Task PublishAnswer()
    {
        if (IsContentEmpty(_answerModel.Content))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AnswerFormLocalizer["FormContentEmptyMessage"],
                Duration = 4000
            });
            return;
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!Guid.TryParse(userIdClaim, out var userId))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AnswerFormLocalizer["FormUserNotFoundMessage"],
                Duration = 4000
            });
            return;
        }
        _answerModel.UserId = userId;
        _answerModel.QuestionId = QuestionId;
        
        var result = await AnswerHttpClient.CreateAnswerAsync(_answerModel);
        
        if (result == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["Error"],
                Detail = AnswerFormLocalizer["FormErrorMessage"],
                Duration = 4000
            });
        }
        else
        {
            _answerModel = new AnswerRequest();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = Localizer["Success"],
                Detail = AnswerFormLocalizer["FormSuccessMessage"],
                Duration = 4000
            });
        }
    }
    
    private bool IsContentEmpty(string? html)
    {
        if (string.IsNullOrWhiteSpace(html)) return true;
        var withoutTags = Regex.Replace(html, "<.*?>", string.Empty);
        var decoded = System.Net.WebUtility.HtmlDecode(withoutTags);
        var cleaned = decoded.Replace("&nbsp;", "").Trim();
        return string.IsNullOrWhiteSpace(cleaned);
    }
}