@using System.Security.Claims
@using AssistClub.UI.Blazor.HttpClients
@using AssistClub.UI.Blazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject AnswerHttpClient AnswerHttpClient
@inject IStringLocalizer<AnswerFormResources> AnswerFormLocalizer
@inject FileHttpClient FileHttpClient

<EditForm Model="_answerModel" OnValidSubmit="PublishAnswer">
    <DataAnnotationsValidator />
    <div class="py-4">
        <label class="text-black fw-medium pb-2">@AnswerFormLocalizer["ComponentTitle"]</label>
        <div class="pb-3">
            <RadzenHtmlEditor @bind-Value="_answerModel.Content" style="height: 200px;" UploadUrl="upload/image">
                <RadzenHtmlEditorUndo/>
                <RadzenHtmlEditorRedo/>
                <RadzenHtmlEditorSeparator/>
                <RadzenHtmlEditorBold/>
                <RadzenHtmlEditorItalic/>
                <RadzenHtmlEditorUnderline/>
                <RadzenHtmlEditorStrikeThrough/>
                <RadzenHtmlEditorSeparator/>
                <RadzenHtmlEditorColor/>
                <RadzenHtmlEditorRemoveFormat/>
            </RadzenHtmlEditor>
            <ValidationMessage For="@(() => _answerModel.Content)" class="text-danger pt-1"/>
        </div>
        <div class="pb-3">
            <label class="text-black fw-medium mb-0">
                @string.Format(Localizer["FormFileLabelWithSize"], AnswerRequest.AttachmentMaxSize / 1024 / 1024)
            </label>
            <RadzenFileInput TValue="string"
                             @bind-Value="_fileContent"
                             @bind-FileName="_fileName"
                             Style="width: 100%"
                             MaxFileSize="AnswerRequest.AttachmentMaxSize"
                             ChooseText="@Localizer["FormFileInputLabel"]"
                             Accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
        </div>
        <div class="pb-2">
            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                @AnswerFormLocalizer["FormSubmitButton"]
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public Guid QuestionId { get; set; }
    [Parameter] public EventCallback AnswerCreated { get; set; }
    
    private AnswerRequest _answerModel = new();
    private string? _fileContent;
    private string? _fileName;
    private bool _isSubmitting;

    private async Task PublishAnswer()
    {
        if (_isSubmitting) return; 
        _isSubmitting = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!Guid.TryParse(userIdClaim, out var userId))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["Error"],
                    Detail = AnswerFormLocalizer["FormUserNotFoundMessage"],
                    Duration = 4000
                });
                return;
            }

            _answerModel.UserId = userId;
            _answerModel.QuestionId = QuestionId;

            if (_fileContent != null && !string.IsNullOrEmpty(_fileName))
            {
                var base64 = _fileContent.Substring(_fileContent.IndexOf(",") + 1);
                var cleanedBytes = Convert.FromBase64String(base64);

                var content = new MultipartFormDataContent
                {
                    { new ByteArrayContent(cleanedBytes), "file", _fileName }
                };

                var response = await FileHttpClient.UploadFileAsync(content);
                if (response.IsSuccessStatusCode)
                {
                    var responseJson = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (responseJson != null && responseJson.TryGetValue("filePath", out var filePath))
                    {
                        _answerModel.AttachmentName = filePath;
                    }
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = Localizer["Error"],
                        Detail = Localizer["FileUploadErrorMessage"],
                        Duration = 4000
                    });
                    return;
                }
            }

            var result = await AnswerHttpClient.CreateAnswerAsync(_answerModel);

            if (result == null)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["Error"],
                    Detail = AnswerFormLocalizer["FormErrorMessage"],
                    Duration = 4000
                });
            }
            else
            {
                _answerModel = new AnswerRequest();
                await AnswerCreated.InvokeAsync();
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["Success"],
                    Detail = AnswerFormLocalizer["FormSuccessMessage"],
                    Duration = 4000
                });
            }
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}